formatVersion: 1
name: OrderedMountPoints
version: 0.1.0
inputs:
  instanceCount:
    type: integer
    title: Enter Instance Count
    minimum: 1
    maximum: 10
    default: 1
  # =========================
  # DISK MOUNTPOINTS
  # =========================
  disks:
    type: array
    title: Disks
    description: Data disk mount points and sizes
    items:
      type: object
      maxItems: 5
      properties:
        size:
          type: number
          title: Size GB
          minimum: 1
          maximum: 1024
        mountpoint:
          type: string
          title: Mountpoint/Drive Letter
  os-image:
    type: string
    description: Select an OS image
    default: Linux
    title: 'Select OS:'
    oneOf:
      - title: Windows
        const: Windows
      - title: Linux
        const: Linux
  hw-config:
    type: string
    description: Select hardware size
    default: Small
    title: 'Select Size:'
    oneOf:
      - title: Small
        const: Small
      - title: Medium
        const: Medium
      - title: Large
        const: Large
resources:
  # =========================
  # DISK RESOURCES
  # =========================
  
  Cloud_vSphere_Disk_1:
    type: Cloud.vSphere.Disk
    properties:
      capacityGb: '${input.disks[0].size}'
      count: '${ length(input.disks) >= 1 ? 1 : 0 }'
  Cloud_vSphere_Disk_2:
    type: Cloud.vSphere.Disk
    properties:
      capacityGb: '${input.disks[1].size}'
      count: '${ length(input.disks) >= 2 ? 1 : 0 }'
  Cloud_vSphere_Disk_3:
    type: Cloud.vSphere.Disk
    properties:
      capacityGb: '${input.disks[2].size}'
      count: '${ length(input.disks) >= 3 ? 1 : 0 }'
  Cloud_vSphere_Disk_4:
    type: Cloud.vSphere.Disk
    properties:
      capacityGb: '${input.disks[3].size}'
      count: '${ length(input.disks) >= 4 ? 1 : 0 }'
  Cloud_vSphere_Disk_5:
    type: Cloud.vSphere.Disk
    properties:
      capacityGb: '${input.disks[4].size}'
      count: '${ length(input.disks) >= 5 ? 1 : 0 }'
  # =========================
  # COMPUTE RESOURCES
  # =========================
  Compute:
    type: Cloud.vSphere.Machine
    properties:
      count: '${input.instanceCount}'
      image: '${input.os-image}'
      flavor: '${input.hw-config}'
      networks:
        - network: '${resource.Network.id}'
      # conditionally attach between 0 and 5 disks to the machine
      attachedDisks: '${map_to_object(resource.Cloud_vSphere_Disk_1[*].id+resource.Cloud_vSphere_Disk_2[*].id+resource.Cloud_vSphere_Disk_3[*].id+resource.Cloud_vSphere_Disk_4[*].id+resource.Cloud_vSphere_Disk_5[*].id,"source")}'
   # =========================
  # NETWORK RESOURCES
  # =========================
  Network:
    type: Cloud.vSphere.Network
    properties:
      networkType: existing